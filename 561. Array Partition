Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.

---------------------solution----------------------
class Solution {
    public int arrayPairSum(int[] nums) {
        Arrays.sort(nums);
        int sum=0;
        for(int i=0;i<nums.length;i=i+2)
        {
          sum+=nums[i];
        }
        return sum;
    }
}

//////////////---------done by other-------------//////////////////
// public class Solution {

// 	public int arrayPairSum(int[] nums) {
// 		int[] exist = new int[20001];
// 		for (int i = 0; i < nums.length; i++) {
// 			exist[nums[i] + 10000]++;
// 		}
// 		int sum = 0;
// 		boolean odd = true;
// 		for (int i = 0; i < exist.length; i++) {
// 			while (exist[i] > 0) {
// 				if (odd) {
// 					sum += i - 10000;
// 				}
// 				odd = !odd;
// 				exist[i]--;
// 			}
// 		}
// 		return sum;
// 	}
	
// }
