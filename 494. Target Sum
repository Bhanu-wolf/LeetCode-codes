
Medium
8.4K
302
Companies
You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 3
Output: 5
Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
-1 + 1 + 1 + 1 + 1 = 3
+1 - 1 + 1 + 1 + 1 = 3
+1 + 1 - 1 + 1 + 1 = 3
+1 + 1 + 1 - 1 + 1 = 3
+1 + 1 + 1 + 1 - 1 = 3

----------------------Solution-----------------------

 class Solution {
    public int findTargetSumWays(int[] nums, int target) {
        
        return countSubsetWithGivenDiff(nums,target);
    }
     static int countSubsetWithGivenDiff(int[] arr, int target) {
        int sum = 0;
        for (int x : arr)
            sum += x;
        int s1 = (sum + target) / 2;
        if((sum < Math.abs(target) || (target+sum) %2 != 0)) return 0;
        return countSubsetSum(arr, s1);
    }

    static int countSubsetSum(int[] arr, int sum) {
        int[][] ans = new int[arr.length + 1][sum + 1];
        int zero=0;
        for(int x:arr)
        {
            if(x==0)
            zero++;
        }
        for (int i = 0; i < arr.length + 1; i++) {
            for (int j = 0; j < sum + 1; j++) {
                if (i == 0)
                    ans[i][j] = 0;
                if (j == 0)
                    ans[i][j] = 1;
            }
        }
        for (int i = 1; i < arr.length + 1; i++) {
            for (int j = 1; j < sum + 1; j++) {
                if (arr[i - 1] <= j)
                    ans[i][j] = ans[i - 1][j - arr[i - 1]] + ans[i - 1][j];
                if((arr[i-1] > j || arr[i-1] == 0))
                    ans[i][j] = ans[i - 1][j];
            }
        }
        return (int)Math.pow(2,zero)*ans[arr.length][sum];
    }
}
   
