Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
Example 2:

Input: root = [1,2]
Output: 1

--------------------------------Solution----------------------------------
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int diameter=Integer.MIN_VALUE;
    public int diameterOfBinaryTree(TreeNode root) {
    //  diameter(root);
    //     return ans;
    maxDepth(root);
    return diameter;
    
    }
    // void diameter(TreeNode root)
    // {
    //   if(root==null)
    //   return ;
    //   int lh=height(root.left);
    //   int rh=height(root.right);
    //   ans=Math.max(ans,lh+rh);
    //   diameter(root.left);
    //   diameter(root.right);
    // }
//     int height(TreeNode root)
// {
//     if(root==null)
//     return 0;
//     if(root.left==null&&root.right==null)
//     return 1;

//     return 1+Math.max(height(root.left),height(root.right));
// }
 public int maxDepth(TreeNode root) {
        if(root==null)return 0;

      int lh=maxDepth(root.left);
      int rh=maxDepth(root.right);
      diameter=Math.max(diameter,lh+rh);
      return 1+Math.max(lh,rh);
    }
}
