/*Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.
Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
*/
..............................code..........................
 class Solution {
    public int searchInsert(int[] a, int target) {
        int s=0;
        int l=a.length;
        int e=l-1;
        int mid=0;
        while(s<=e)
        {//if target element is less than first element of array then it has no position return -1 
        if(target<a[0])
            return 0;
            //if target element is greater than last element of array then return position length of array
         if(target>a[l-1])
             return l;
           mid=s+(e-s)/2;
            if(a[mid]==target)
                return mid;
            else if(a[0]<a[l-1])
            {
                if(target<a[mid])
                    e=mid-1;
                else
                    s=mid+1;
            }  
            //If All elements here are sorted in decending order but above all are sorted in ascending order
           /* else if(a[0]>a[l-1])
            {
                if(target<a[mid])
                    s=mid+1;
                else
                    e=mid-1;
            }
            */
        }
        return e+1;
    }
}

// It's like an question of floor and ceiling  of a number
