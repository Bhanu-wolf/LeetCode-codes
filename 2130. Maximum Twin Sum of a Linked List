
In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

 

Example 1:


Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
---------solution------------

class Solution {
    public int pairSum(ListNode head1) { 
        //if there is only two node
        if(head1.next.next==null)
        return head1.val+head1.next.val;
        // find the mid of linked list
        ListNode mid=getMid(head1);
        //now reverse the list from mid
        ListNode head2=reverse(mid);
        int x=0;
        while(head2!=null)
        {
          int temp=head1.val+head2.val;
          if(x<temp)
         x=temp;
         head1=head1.next;
         head2=head2.next;  
        }
        return x;
    }
    static ListNode getMid(ListNode head)
    {
        ListNode s=head,f=head,prev=null;
        while(f!=null&&f.next!=null)
        {
            f=f.next.next;
            prev=s;
            s=s.next;
        }
        // prev.next=null;
        return s;
    }
    static ListNode reverse(ListNode head)
    {
        if(head==null||head.next==null)
         return head;
        ListNode node=reverse(head.next);
        head.next.next=head;
        head.next=null;
        return node;
    }
}
