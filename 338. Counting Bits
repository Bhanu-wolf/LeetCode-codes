Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 
 ----------------solution------------------
 
 class Solution {
    public int[] countBits(int n) {
        int[]dp=new int[n+1];
        Arrays.fill(dp,-1);
        int i=1;
        count(0,n,dp,i);
        return dp;
    }
    static void count(int l,int h,int[]dp,int i)
    {
       while(l<=h)
       {
           if(l==0||l==1)
           dp[l]=l;
           else if(l==(int)Math.pow(2,i))
           {dp[l]=1;
           i++;
           }
           else if((l&1)!=0)
           dp[l]=dp[l-1]+dp[1];
           else if((l&1)==0)
           dp[l]=dp[l/2];
           l++;
       }
    }
}
