Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
Example 2:


Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.

--------------solution--------------------------------------

// /**
//  * Definition for singly-linked list.
//  * public class ListNode {
//  *     int val;
//  *     ListNode next;
//  *     ListNode(int x) {
//  *         val = x;
//  *         next = null;
//  *     }
//  * }
//  */
public class Solution {
    public ListNode getIntersectionNode(ListNode h1, ListNode h2) {
        // if(h1==null||h2==null||h1==h2)
        // return h1;
        // int l1=getLength(h1);
        // int l2=getLength(h2);
        // if(l1<l2)
        // {
        //     ListNode temp=h2;
        //     h2=h1;
        //     h1=temp;
        //     int len=l1;
        //     l1=l2;
        //     l2=len;
        // }
        // int n=(l1-l2+1);
        // int i=1,flag=0;
        // ListNode temp1=h1,temp2=h2;
        
        // while(i<=n)
        // {
        //     while(temp1!=null&&temp2!=null)
        //     {
        //         if(temp1==temp2)
        //         {
        //             return temp1;
        //         }
        //         else
        //         {
        //             temp1=temp1.next;
        //             temp2=temp2.next;
        //         }
        //     }
        //     temp1=h1;
        //     for(int j=1;j<=i;j++)
        //     {
        //         temp1=temp1.next;
        //     }
        //     temp2=h2;
        //     i++;
        // }
        // return temp1=null;
        ListNode a=h1,b=h2;
        while(a!=b)
        {
            a=a==null?h2:a.next;
            b=b==null?h1:b.next;
        }
        return a;
    }
    // static int getLength(ListNode h1)
    // {
    //     ListNode temp=h1;
    //     int i=0;
    //     while(temp!=null)
    //     {
    //         i++;
    //         temp=temp.next;
    //     }
    //     return i;
    // }
}
// public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
//     //boundary check
//     if(headA == null || headB == null) return null;
    
//     ListNode a = headA;
//     ListNode b = headB;
    
//     //if a & b have different len, then we will stop the loop after second iteration
//     while( a != b){
//     	//for the end of first iteration, we just reset the pointer to the head of another linkedlist
//         a = a == null? headB : a.next;
//         b = b == null? headA : b.next;    
//     }
    
//     return a;
// }
