You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,5,2,1], queries = [3,10,21]
Output: [2,3,4]
Explanation: We answer the queries as follows:
- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.
- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.
- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.
Example 2:

Input: nums = [2,3,4,5], queries = [1]
Output: [0]
Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.




-----------solution-------------------

class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
    // int[]arr=nums.clone();
     Arrays.sort(nums);
     int[]arr=new int[queries.length];
     for(int i=0;i<arr.length;i++)
         arr[i]=possibility(nums,queries[i]);

    return arr;
    }
    static int possibility(int[]arr,int key)
    {int  sum=0,count=0;
       if(key<arr[0])
        return 0;
        for(int i=0;i<arr.length;i++)
        {
             if(sum<=key)
             {
                 sum+=arr[i];
                 if(sum>key)
                 break;

                 count++;
             }
             else
             break;
        }
        return count;
    }
}



------------solution-------------
 public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int[] arr=new int[nums.length];
        arr[0]=nums[0];
        for(int i=1;i<nums.length;i++)
        {
            arr[i]=arr[i-1]+nums[i];
        }
        for(int i=0;i<queries.length;i++)
            queries[i]=possibility(arr,queries[i]);

        return queries;}
    static int possibility(int[]arr,int key)
    {
        if(arr[0]>key)
        return 0;
        if(arr[arr.length-1]<=key)
         return arr.length;
        int s=0,e=arr.length-1,mid=0;
        while(s<e)
        {
            mid=s+(e-s)/2;
            if(arr[mid]==key)
            return mid+1;
            else if(arr[mid]<key)
            s=mid+1;
            else
            e=mid;
            
          

            
        }
        return s;
    }
