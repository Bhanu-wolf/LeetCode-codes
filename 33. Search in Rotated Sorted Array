Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

//this work for both if you can contain elements
-----------------------------------------------Solution-----------------------------------------------
class Solution {
    public int search(int[] nums, int target) {
        int s=0;
        int e=nums.length-1;
        int mid=0;
        while(s<=e)
        {
            mid=s+(e-s)/2;
            if(nums[mid]==target)
                return mid;
            else if(nums[s]<=nums[mid])
            {
                if(target<nums[mid]&&target>=nums[s])
                    e=mid-1;
                else
                    s=mid+1;
            }
            else if(nums[s]>nums[mid])
            {
                if(target>nums[mid]&&target<=nums[e])
                    s=mid+1;
                else
                    e=mid-1;
            }
            else
                s++;
        }
        return -1;
    }
}
///////////////////////////second Solution----------------------------------------------
class Solution {
    public int search(int[] nums, int target) {
        int pivot=findPivot(nums);
        int a=search(nums,0,pivot,target);
        if(a!=-1)
            return a;
        return search(nums,pivot+1,nums.length-1,target);
        
    }
    static int findPivot(int[]nums)
    {
        int s=0,e=nums.length-1;
        while(s<=e)
        {
            int mid=s+(e-s)/2;
            if(mid<e&&nums[mid]>nums[mid+1])
                return mid;
            else if(mid>s&&nums[mid]<nums[mid-1])
                return mid-1;
            else if(nums[mid]>=nums[s])
                s=mid+1;
            else
                e=mid-1;
        }
        return -1;
    }
    static int search(int[] nums,int st,int ed,int target)
    {
        int s=st,e=ed;
        while(s<=e){
        int mid=s+(e-s)/2;
        if(nums[mid]==target)
            return mid;
        else if(nums[mid]>target)
            e=mid-1;
        else
            s=mid+1;
        }
        return -1;
    }
}

----------------------------------using Recursion----------------------------------------
class Solution {
    public int search(int[] nums, int target) {
        return searchRotated(nums,0,nums.length-1,target);
    }
    static int searchRotated(int[] arr, int s, int e, int target) {
        if (s > e)
            return -1;
        int mid = s + (e - s) / 2;
        if (arr[mid] == target)
            return mid;
        if (arr[s] <= arr[mid]) {
            if (arr[mid] > target && target >= arr[s])
                return searchRotated(arr, s, mid - 1, target);
            else
                return searchRotated(arr, mid + 1, e, target);
        } else {
            if (arr[mid] < target && target <= arr[e])
                return searchRotated(arr, mid + 1, e, target);
            else
                return searchRotated(arr, s, mid - 1, target);

        }
    }
}
