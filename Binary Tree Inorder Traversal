/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// class Solution {
//     public List<Integer> inorderTraversal(TreeNode root) {
//         List<Integer>list=new ArrayList<>();
//         if(root==null)
//         return list;
//         inorder(root,list);
//         return list;
//     }
//     static void inorder(TreeNode root,List<Integer>list)
//     {
//         if(root==null)
//         return;
//         inorder(root.left,list);
//         list.add(root.val);
//         inorder(root.right,list);
        
//     }
// }

//through iterative

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer>list=new ArrayList<>();
        Stack<TreeNode>stc=new Stack<>();
        if(root==null)
        return list;
        TreeNode node=root;
        while(true)
        {
            if(node!=null)
                {
                    stc.push(node);
                    node=node.left;
                }
            else
                {
                    if(stc.isEmpty())
                        break;
                    node=stc.pop();
                    list.add(node.val);
                    node=node.right;
                }
        }
        return list;
    }
    
}
