


Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.
Example 2:


Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one./**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        if(length(head)==1)
        return head;
        if(length(head)==2)
        return head.next;
        int n=length(head);
        n=n/2;  
        ListNode temp=head;
        int i=0;
        while(i<n)
        {
            i++;
            temp=temp.next;
        }
        return temp;
    }
    static int length(ListNode head)
    {int i=0;
        ListNode temp=head;
        while(temp!=null)
        {
            i++;
            temp=temp.next;
        }
        return i;
    }
}
