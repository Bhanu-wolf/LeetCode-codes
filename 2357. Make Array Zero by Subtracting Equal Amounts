You are given a non-negative integer array nums. In one operation, you must:

Choose a positive integer x such that x is less than or equal to the smallest non-zero element in nums.
Subtract x from every positive element in nums.
Return the minimum number of operations to make every element in nums equal to 0.

 

Example 1:

Input: nums = [1,5,0,3,5]
Output: 3
Explanation:
In the first operation, choose x = 1. Now, nums = [0,4,0,2,4].
In the second operation, choose x = 2. Now, nums = [0,2,0,0,2].
In the third operation, choose x = 2. Now, nums = [0,0,0,0,0].


---------------solution-----------------------------


class Solution {
    public int minimumOperations(int[] nums) {
       if(check(nums)==0)
       return 0;
        Arrays.sort(nums);
        boolean notzero=true;
        int i=0;
        int count=0;
        while(notzero)
        {
            if(i>=nums.length)
            break;
           if(nums[i]!=0&&nums[i]<=smallest(nums))
           {  count++;
               int k=nums[i];
              for(int j=i;j<nums.length;j++){
                    nums[j]-=k;}
                    if(check(nums)==0){
                    notzero=false;
                    break;
                    }
                    i++;


           }
           else
           i++;
        }
        return count;
    }
    static int check(int[]arr)
    {
 int flag=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0)
            {flag=1;
            break;
            }
        }
        if(flag==0)
        return 0;
        else 
        return 1;
    }
    static int smallest(int[]arr)
    {
        Arrays.sort(arr);
        int n=0;
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]!=0){
            n=arr[i];
            break;
            }
        }
        return n;
    }

}



    public int minimumOperations(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int a: nums)
            if (a > 0)
                set.add(a);
        return set.size();
    }}
